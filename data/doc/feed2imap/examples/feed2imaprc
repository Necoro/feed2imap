# Global options:
# max-failures: maximum number of failures allowed before they are reported in
#   normal mode (default 10). By default, failures are only visible in verbose
#   mode. Most feeds tend to suffer from temporary failures.
# dumpdir: (for debugging purposes) directory where all fetched feeds will be
#   dumped.
# debug-updated: (for debugging purposes) if true, display a lot of information
#   about the "updated-items" algorithm.
# include-images: download images and include them in the mail? (true/false)
# reupload-if-updated: when an item is updated, and was previously deleted,
#   reupload it? (true/false, default true)
# default-email: default email address in the format foo@example.com
# disable-ssl-verification: disable SSL certification when connecting
#   to IMAPS accounts (true/false)
# timeout: time before getting timeout when fetching feeds (default 30) in seconds
# 
# Per-feed options:
# name: name of the feed (must be unique)
# url: HTTP[S] address where the feed has to be fetched
# target: the IMAP URI where to put emails. Should start with imap:// for IMAP,
#   imaps:// for IMAPS and maildir:// for a path to a local maildir.
# min-frequency: (in HOURS) is the minimum frequency with which this particular
#   feed will be fetched
# disable: if set to something, the feed will be ignored
# include-images: download images and include them in the mail? (true/false)
# reupload-if-updated: when an item is updated, and was previously deleted,
#   reupload it? (true/false, default true)
# always-new: feed2imap tries to use a clever algorithm to determine whether
#   an item is new or has been updated. It doesn't work well with some web apps
#   like mediawiki. When this flag is enabled, all items which don't match
#   exactly a previously downloaded item are considered as new items.
# ignore-hash: Some feeds change the content of their items all the time, so
#   feed2imap detects that they have been updated at each run. When this flag
#   is enabled, feed2imap ignores the content of an item when determining
#   whether the item is already known.
# dumpdir: (for debugging purposes) directory where all fetched feeds will be
#   dumped.
# Snownews/Liferea scripts support :
#   execurl: Command to execute that will display the RSS/Atom feed on stdout
#   filter: Command to execute which will receive the RSS/Atom feed on stdin,
#    modify it, and output it on stdout.
#   For more information: http://kiza.kcore.de/software/snownews/snowscripts/
#
#
# If your login contains an @ character, replace it with %40. Other reserved
# characters can be escaped in the same way (see man ascii to get their code)
feeds: 
  - name: feed2imap
    url: http://home.gna.org/feed2imap/feed2imap.rss
    target: imap://luser:password@imap.apinc.org/INBOX.Feeds.Feed2Imap
  - name: lucas
    url: http://www.lucas-nussbaum.net/blog/?feed=rss2
    target: imap://luser:password@imap.apinc.org/INBOX.Feeds.Lucas
  - name: JabberFrWiki
    url: http://wiki.jabberfr.org/index.php?title=Special:Recentchanges&feed=rss
    target: imaps://luser:password@imap.apinc.org/INBOX.Feeds.JabberFR
    always-new: true
  - name: LeMonde
    execurl: "wget -q -O /dev/stdout http://www.lemonde.fr/rss/sequence/0,2-3208,1-0,0.xml"
    filter: "/home/lucas/lemonde_getbody"
    target: imap://luser:password@imap.apinc.org/INBOX.Feeds.LeMonde
# It is also possible to reuse the same string in the target parameter:
# target-refix: &target "imap://user:pass@host/rss."
# feeds:
#   - name: test1
#     target: [ *target, 'test1' ]
#     ...
#   - name: test2
#     target: [ *target, 'test2' ]
#     ...

# vim: ft=yaml:sts=2:expandtab
